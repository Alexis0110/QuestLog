<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <script src="https://cdn.tailwindcss.com"></script>
    <title>QuestLog</title>
</head>
<body class="font-sans bg-gray-100">

<header class="flex items-center justify-between p-4 relative bg-white shadow">
    <div class="flex text-5xl font-bold">
        <div class="text-blue-600">Quest</div>
        <div class="text-orange-500">Log</div>
    </div>

    {% if username is defined %}
    <div class="absolute left-1/2 top-4 transform -translate-x-1/2">
      <div class="text-2xl font-semibold text-gray-700">{{ username }}</div>
    </div>
    {% endif %}
</header>

<main class="p-6">
    <form method="post" action="{{ path('steam_profile') }}" class="space-y-4 mb-6">
        <input type="text" name="steam_profile" placeholder="Dein Steam Profil-Link" class="border p-2 w-full rounded" required>
        <button type="submit" class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600">Profil abrufen</button>
    </form>

    <table id="gamesTable" class="table-auto w-full bg-white shadow rounded">
        <thead>
            <tr class="bg-gray-200">
                <th id="headerName" class="px-4 py-2 cursor-pointer">Spiel &#x25B2;</th>
                <th id="headerAchievements" class="px-4 py-2 cursor-pointer">Achievements &#x25B2;</th>
            </tr>
        </thead>
        <tbody id="gamesBody">
            <!-- Spiele werden hier mit JavaScript eingefÃ¼gt -->
        </tbody>
    </table>
</main>

<script>
let pendingAchievements = [];
let steamId = "{{ steamId|default('') }}";
const tbody = document.getElementById('gamesBody');

if (steamId) {
    fetch(`/fetch-all-games/${steamId}`)
        .then(response => response.json())
        .then(games => {
            games.forEach(game => {
    const row = document.createElement('tr');
    row.setAttribute('data-game-id', game.id);
    row.innerHTML = `
        <td class="px-4 py-2">${game.name}</td>
        <td class="px-4 py-2 achievements" data-percent="0">Laden...</td>
    `;
    tbody.appendChild(row);

    // <<< HIER FIX
    pendingAchievements.push({ steamId: steamId, gameId: game.id, row });
});

            loadNextAchievements();
        });
}

function loadNextAchievements() {
    if (pendingAchievements.length === 0) return;

    const { steamId, gameId, row } = pendingAchievements.shift();

    fetch(`/fetch-achievements-batch/${steamId}/${gameId}`)
        .then(response => response.json())
        .then(data => {
            if (data.progress) {
                row.querySelector('.achievements').textContent = data.progress;
                row.querySelector('.achievements').dataset.percent = data.percent;
            } else {
                row.querySelector('.achievements').textContent = 'Has No Achievements';
            }
            loadNextAchievements();
        })
        .catch(error => {
            row.querySelector('.achievements').textContent = 'Fehler';
            loadNextAchievements();
        });
}

// Tabellen Sortierung (optional)
document.addEventListener('DOMContentLoaded', function() {
    const headerName = document.getElementById('headerName');
    const headerAchievements = document.getElementById('headerAchievements');

    let sortColumn = 'name';
    let sortDirection = 'asc';

    function sortTable() {
        const rows = Array.from(tbody.querySelectorAll('tr'));
        rows.sort((a, b) => {
            let aVal = sortColumn === 'name' ? a.children[0].textContent.trim().toLowerCase() : parseFloat(a.children[1].dataset.percent);
            let bVal = sortColumn === 'name' ? b.children[0].textContent.trim().toLowerCase() : parseFloat(b.children[1].dataset.percent);
            if (sortDirection === 'asc') {
                return aVal > bVal ? 1 : -1;
            } else {
                return aVal < bVal ? 1 : -1;
            }
        });
        tbody.innerHTML = '';
        rows.forEach(row => tbody.appendChild(row));
    }

    headerName.addEventListener('click', () => {
        sortColumn = 'name';
        sortDirection = sortDirection === 'asc' ? 'desc' : 'asc';
        sortTable();
    });

    headerAchievements.addEventListener('click', () => {
        sortColumn = 'achievements';
        sortDirection = sortDirection === 'asc' ? 'desc' : 'asc';
        sortTable();
    });
});
</script>

</body>
</html>
