{% extends 'base.html.twig' %}

{% block title %}QuestLog
{% endblock %}

{% block body %}
<div class="mb-4 flex justify-start">
    <input 
        type="text" 
        id="searchInput"
        placeholder="Search for a game..." 
        class="border p-2 rounded w-full md:w-1/3 focus:outline-none focus:ring-2 focus:ring-blue-500  bg-white text-gray-800 
           dark:bg-gray-800 dark:text-gray-200 dark:border-gray-600 
           placeholder-gray-400 dark:placeholder-gray-500"
    >
</div>

	<table id="gamesTable" class="table-auto w-full bg-white dark:bg-gray-800 rounded shadow-md overflow-hidden">
		<thead class=" bg-gray-200 dark:bg-gray-700 text-gray-800 dark:text-gray-100">
			<tr>
				<th id="headerName" class="px-6 py-3 text-left cursor-pointer select-none">
					Game
					<span id="arrowName">▲</span>
				</th>
				<th id="headerAchievements" class="px-6 py-3 text-left cursor-pointer select-none">
					Achievements
					<span id="arrowAchievements"></span>
				</th>
			</tr>
		</thead>
		<tbody
			id="gamesBody" class="text-gray-700">
            <!-- dynamic table. games are added through script -->
		</tbody>
	</table>

	<script>
		let pendingAchievements = [];
let steamId = "{{ steamId|default('') }}";
const tbody = document.getElementById('gamesBody');

if (steamId) {
fetch (`/fetch-all-games/${steamId}`).then(response => response.json()).then(games => {
games.forEach(game => {
const row = document.createElement('tr');
row.setAttribute('data-game-id', game.id);
row.innerHTML = `
    <td class="cursor-pointer px-3 py-1">
        <div class="flex items-center space-x-3">
            <img src="https://cdn.cloudflare.steamstatic.com/steam/apps/${
game.steamId
}/capsule_sm_120.jpg" 
                 alt="${
game.name
}" 
                 class="w-30 h-18 object-cover rounded">
            <div class="text-gray-800 dark:text-gray-100 font-semibold">${
game.name
}</div>
        </div>
    </td>
    <td class="cursor-pointer px-3 py-2 text-right">
        <div class="achievements text-gray-800 dark:text-gray-100 text-sm" data-percent="0">Laden...</div>
    </td>
`;

row.classList.add('hover:bg-blue-50', 'dark:hover:bg-gray-700', 'transition', 'duration-200', 'cursor-pointer');

row.addEventListener('click', () => {
window.location.href = `/game/${
game.steamId
}`;
});
tbody.appendChild(row);

pendingAchievements.push({steamId: steamId, gameId: game.id, row});
});

loadNextAchievements();
});
}

function loadNextAchievements() {
if (pendingAchievements.length === 0) 
return;


const {steamId, gameId, row} = pendingAchievements.shift();

fetch(`/fetch-achievements-batch/${steamId}/${gameId}`).then(response => response.json()).then(data => {
if (data.progress) {
row.querySelector('.achievements').textContent = data.progress;
row.querySelector('.achievements').dataset.percent = data.percent;
} else {
row.querySelector('.achievements').textContent = 'Has No Achievements';
} loadNextAchievements();
}).catch(error => {
row.querySelector('.achievements').textContent = 'Fehler';
loadNextAchievements();
});
}

document.addEventListener('DOMContentLoaded', function () {
const headerName = document.getElementById('headerName');
const headerAchievements = document.getElementById('headerAchievements');
const arrowName = document.getElementById('arrowName');
const arrowAchievements = document.getElementById('arrowAchievements');

let sortColumn = 'name';
let sortDirection = 'asc'; // 'asc' oder 'desc'

function updateSortIcons() {
arrowName.innerHTML = '';
arrowAchievements.innerHTML = '';

if (sortColumn === 'name') {
arrowName.innerHTML = sortDirection === 'asc' ? '▲' : '▼';
} else if (sortColumn === 'achievements') {
arrowAchievements.innerHTML = sortDirection === 'asc' ? '▲' : '▼';
}
}

function sortTable() {
const rows = Array.from(document.querySelectorAll('#gamesBody tr'));

rows.sort((a, b) => {
let aVal,
bVal;
if (sortColumn === 'name') {
aVal = a.children[0].innerText.trim().toLowerCase();
bVal = b.children[0].innerText.trim().toLowerCase();
} else if (sortColumn === 'achievements') {
aVal = parseFloat(a.querySelector('.achievements').dataset.percent) || 0;
bVal = parseFloat(b.querySelector('.achievements').dataset.percent) || 0;
}

if (sortDirection === 'asc') {
return aVal > bVal ? 1 : -1;
} else {
return aVal < bVal ? 1 : -1;
}
});

const tbody = document.getElementById('gamesBody');
tbody.innerHTML = '';
rows.forEach(row => tbody.appendChild(row));
}

headerName.addEventListener('click', () => {
if (sortColumn === 'name') {
sortDirection = sortDirection === 'asc' ? 'desc' : 'asc';
} else {
sortColumn = 'name';
sortDirection = 'asc';
} updateSortIcons();
sortTable();
});

headerAchievements.addEventListener('click', () => {
if (sortColumn === 'achievements') {
sortDirection = sortDirection === 'asc' ? 'desc' : 'asc';
} else {
sortColumn = 'achievements';
sortDirection = 'asc';
} updateSortIcons();
sortTable();
});

updateSortIcons();
});

document.addEventListener('DOMContentLoaded', function () {
    const searchInput = document.getElementById('searchInput');

    searchInput.addEventListener('input', function () {
        const filter = searchInput.value.toLowerCase();
        const rows = document.querySelectorAll('#gamesBody tr');

        rows.forEach(row => {
            const gameName = row.querySelector('td div div').textContent.toLowerCase();
            if (gameName.includes(filter)) {
                row.style.display = '';
            } else {
                row.style.display = 'none';
            }
        });
    });
});
</script>
{% endblock %}
